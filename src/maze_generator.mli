

open Maze

(* Interface for Maze Generators *)
module type MAZE_GENERATOR = sig

  type cell  (* Abstract type for representing individual cells in the maze *)
  type maze  (* Abstract type for representing the overall maze structure *)

  (* [generate maze] generates a maze using a specific algorithm, starting with the given [maze] 
     and returning a modified version of it. The provided [maze] typically has all walls intact,
     and this function "carves" a maze out of it by removing appropriate walls.
     - Parameter maze: An initial maze structure.
     - Returns: The newly generated maze with modified walls.
  *)
  val generate : Maze.maze -> Maze.maze
end

(* Functor for Maze Generator *)
module MakeGenerator : functor (_ : MAZE_GENERATOR) -> MAZE_GENERATOR

(* The [MakeGenerator] functor takes a module that satisfies the [MAZE_GENERATOR] signature
   and returns a module that adheres to the same [MAZE_GENERATOR] interface. This allows for 
   the dynamic creation of maze generators based on the input implementation. *)

(* Recursive Backtracking Maze Generator *)
module RecursiveBacktrackerGenerator : MAZE_GENERATOR

(* The [RecursiveBacktrackerGenerator] module generates mazes using the recursive backtracking algorithm.
   This algorithm works by starting at an initial cell, exploring its neighbors in a randomized order, and
   recursively visiting unvisited neighbors, effectively creating a maze by backtracking when no unvisited
   neighbors remain. The result is typically a perfect maze, which has one unique solution between any two cells. *)

(* Prim's Algorithm Maze Generator *)
module PrimGenerator : MAZE_GENERATOR

(* The [PrimGenerator] module generates mazes using Prim's algorithm.
   Prim's algorithm is a randomized approach that starts with an initial cell, adding neighboring walls
   to a frontier, and then randomly selecting walls to connect neighboring cells, ensuring they remain in 
   the same connected component. The result is a minimum spanning tree of cells, forming a perfect maze. *)

(* Kruskal's Algorithm Maze Generator *)
module KruskalGenerator : MAZE_GENERATOR

(* The [KruskalGenerator] module generates mazes using Kruskal's algorithm.
   Kruskal's algorithm operates by treating every cell as its own component and then considering all walls
   between cells, removing walls in a randomized order while avoiding cycles to ensure all cells are connected.
   The result is also a perfect maze, generated by merging cells into a unified connected component. *)
